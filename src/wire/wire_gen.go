// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
	"log"
	"tax-priority-api/src/application/cache"
	events2 "tax-priority-api/src/application/events"
	handlers2 "tax-priority-api/src/application/faq/handlers"
	handlers3 "tax-priority-api/src/application/testimonial/handlers"
	cache2 "tax-priority-api/src/infrastructure/cache"
	"tax-priority-api/src/infrastructure/events"
	"tax-priority-api/src/infrastructure/persistence"
	"tax-priority-api/src/infrastructure/persistence/repositories"
	"tax-priority-api/src/infrastructure/websocket"
	"tax-priority-api/src/presentation/handlers"
)

// Injectors from wire.go:

// InitializeFAQHTTPHandler инициализирует HTTP обработчик FAQ
func InitializeFAQHTTPHandler(db *gorm.DB) *handlers.FAQHTTPHandler {
	genericRepository := CreateFAQGenericRepository(db)
	faqRepository := CreateFAQRepository(genericRepository)
	redisConfig := persistence.NewRedisConfig()
	client := CreateRedisClient(redisConfig)
	cacheConfig := cache.NewCacheConfig()
	cacheCache := cache2.NewRedisCache(client, cacheConfig)
	keyGenerator := CreateFAQKeyGenerator()
	invalidationConfig := CreateFAQInvalidationConfig()
	cacheManager := CreateFAQCacheManager(cacheCache, keyGenerator, cacheConfig, invalidationConfig)
	cachedFAQRepository := repositories.NewCachedFAQRepository(genericRepository, faqRepository, cacheManager, keyGenerator, cacheConfig)
	hub := websocket.NewHub()
	notificationService := events.NewNotificationService(hub)
	faqCommandHandlers := handlers2.NewFAQCommandHandlers(cachedFAQRepository, notificationService)
	faqQueryHandlers := handlers2.NewFAQQueryHandlers(cachedFAQRepository)
	faqhttpHandler := handlers.NewFAQHTTPHandler(faqCommandHandlers, faqQueryHandlers)
	return faqhttpHandler
}

// InitializeTestimonialHandler инициализирует HTTP обработчик Testimonials
func InitializeTestimonialHandler(db *gorm.DB) *handlers.TestimonialHTTPHandler {
	genericRepository := CreateTestimonialGenericRepository(db)
	redisConfig := persistence.NewRedisConfig()
	client := CreateRedisClient(redisConfig)
	cacheConfig := cache.NewCacheConfig()
	cacheCache := cache2.NewRedisCache(client, cacheConfig)
	keyGenerator := CreateTestimonialKeyGenerator()
	invalidationConfig := CreateTestimonialInvalidationConfig()
	cacheManager := CreateTestimonialCacheManager(cacheCache, keyGenerator, cacheConfig, invalidationConfig)
	cachedTestimonialRepository := repositories.NewCachedTestimonialRepository(genericRepository, cacheManager, keyGenerator, cacheConfig)
	testimonialCommandHandlers := handlers3.NewTestimonialCommandHandlers(cachedTestimonialRepository)
	testimonialQueryHandlers := handlers3.NewTestimonialQueryHandlers(cachedTestimonialRepository)
	testimonialHTTPHandler := handlers.NewTestimonialHTTPHandler(testimonialCommandHandlers, testimonialQueryHandlers)
	return testimonialHTTPHandler
}

// InitializeHandlerFactory инициализирует фабрику обработчиков
func InitializeHandlerFactory(db *gorm.DB) *HandlerFactory {
	redisConfig := persistence.NewRedisConfig()
	client := CreateRedisClient(redisConfig)
	hub := websocket.NewHub()
	notificationService := events.NewNotificationService(hub)
	cacheConfig := cache.NewCacheConfig()
	cacheCache := cache2.NewRedisCache(client, cacheConfig)
	dependencyContainer := NewDependencyContainer(db, client, hub, notificationService, cacheCache)
	handlerFactory := NewHandlerFactory(dependencyContainer)
	return handlerFactory
}

// wire.go:

// DependencyContainer содержит все основные зависимости
type DependencyContainer struct {
	DB                  *gorm.DB
	RedisClient         *redis.Client
	Hub                 *websocket.Hub
	NotificationService events2.NotificationService
	Cache               cache.Cache
}

// NewDependencyContainer создает контейнер зависимостей
func NewDependencyContainer(
	db *gorm.DB,
	redisClient *redis.Client,
	hub *websocket.Hub,
	notificationService events2.NotificationService, cache3 cache.Cache,

) *DependencyContainer {
	return &DependencyContainer{
		DB:                  db,
		RedisClient:         redisClient,
		Hub:                 hub,
		NotificationService: notificationService,
		Cache:               cache3,
	}
}

// CreateRedisClient создает Redis клиента для Wire (без ошибки)
func CreateRedisClient(config *persistence.RedisConfig) *redis.Client {
	client, err := persistence.ConnectRedis(config)
	if err != nil {
		log.Fatalf("Failed to connect to Redis: %v", err)
	}
	return client
}

// BaseProviderSet базовый набор провайдеров для всех модулей
var BaseProviderSet = wire.NewSet(websocket.NewHub, persistence.NewRedisConfig, CreateRedisClient, cache.NewCacheConfig, cache2.NewRedisCache, events.NewNotificationService, NewDependencyContainer)

// FAQProviderSet набор провайдеров для FAQ
var FAQProviderSet = wire.NewSet(
	BaseProviderSet,

	CreateFAQKeyGenerator,
	CreateFAQInvalidationConfig,
	CreateFAQCacheManager,

	CreateFAQGenericRepository,
	CreateFAQRepository, repositories.NewCachedFAQRepository, handlers2.NewFAQCommandHandlers, handlers2.NewFAQQueryHandlers, handlers.NewFAQHTTPHandler,
)

// TestimonialProviderSet набор провайдеров для Testimonials
var TestimonialProviderSet = wire.NewSet(
	BaseProviderSet,

	CreateTestimonialKeyGenerator,
	CreateTestimonialInvalidationConfig,
	CreateTestimonialCacheManager,

	CreateTestimonialGenericRepository, repositories.NewCachedTestimonialRepository, handlers3.NewTestimonialCommandHandlers, handlers3.NewTestimonialQueryHandlers, handlers.NewTestimonialHTTPHandler,
)

// HandlerFactory фабрика для создания обработчиков
type HandlerFactory struct {
	container *DependencyContainer
}

// NewHandlerFactory создает новую фабрику обработчиков
func NewHandlerFactory(container *DependencyContainer) *HandlerFactory {
	return &HandlerFactory{
		container: container,
	}
}

// CreateWebSocketHandler создает WebSocket обработчик
func (f *HandlerFactory) CreateWebSocketHandler() *handlers.WebSocketHandler {
	return handlers.NewWebSocketHandler(f.container.Hub, f.container.NotificationService)
}

// CreateFAQHandler создает FAQ обработчик
func (f *HandlerFactory) CreateFAQHandler() *handlers.FAQHTTPHandler {
	return InitializeFAQHTTPHandler(f.container.DB)
}

// CreateTestimonialHandler создает Testimonial обработчик
func (f *HandlerFactory) CreateTestimonialHandler() *handlers.TestimonialHTTPHandler {
	return InitializeTestimonialHandler(f.container.DB)
}
